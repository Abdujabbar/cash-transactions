<?php

namespace app\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\db\Exception;
use yii\db\Expression;

/**
 * This is the model class for table "transfers".
 *
 * @property int $id
 * @property int $sender
 * @property int $receiver
 * @property int $amount
 * @property string $created_at
 * @property string $updated_at
 *
 * @property User $senderUser
 * @property User $receiverUser
 */
class Transfer extends \yii\db\ActiveRecord
{
    const SCENARIO_TRANSFER = 'transfer';

    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'transfers';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [
                [
                    'sender',
                    'amount',
                    'receiver'
                ],
                'required',
                'on' => self::SCENARIO_TRANSFER],
            [
                'receiver',
                'compare',
                'compareAttribute' => 'sender',
                'operator' => '!=',
                'message' => 'You cannot send amount to yourself'
            ],
            [
                'amount',
                'canTransfer'
            ],
            [
                [
                    'amount'
                ],
                'number',
                'min' => 0.01,
                'numberPattern' => '/^[\d]*+(\.\d{1,2})?$/',
                'message' => 'amount must be a number, and can contain only can 2 decimals after floating point, float point character is "."'
            ],
            [
                [
                    'receiver',
                    'sender'
                ],
                'exist',
                'skipOnError' => true,
                'targetClass' => User::className(),
                'targetAttribute' => [
                    'receiver' => 'id'
                ]
            ],
        ];
    }


    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'Sender' => Yii::t('app', 'Sender'),
            'Receiver' => Yii::t('app', 'Receiver'),
            'amount' => Yii::t('app', 'Amount'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSenderUser()
    {
        return $this->hasOne(User::className(), ['id' => 'sender']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReceiverUser()
    {
        return $this->hasOne(User::className(), ['id' => 'receiver']);
    }


    public function beforeValidate()
    {
        $this->amount = (float)number_format((float)$this->amount, 2, '.', '');
        return parent::beforeValidate();
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        $this->receiverUser->calculateBalance();
        $this->senderUser->calculateBalance();
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @param array $params
     * @return ActiveDataProvider
     */
    public function search($params = [])
    {
        $query = self::find();

        $this->load($params);

        if ($this->receiver) {
            $query->where(['receiver' => $this->receiver]);
        }

        if ($this->sender) {
            $query->where(['sender' => $this->sender]);
        }

        return new ActiveDataProvider([
            'query' => $query,
        ]);
    }

    /**
     * @param $attribute
     * @param $params
     * @param $validator
     * @return bool
     */
    public function canTransfer($attribute, $params, $validator)
    {
        if ($this->senderUser) {
            if (($this->senderUser->balance - $this->$attribute) >= User::MIN_BALANCE) {
                return true;
            }
            $this->addError($attribute, "{$attribute} can't be greater than: " . $this->senderUser->availableTransferAmount());
        }
        return false;
    }
}
