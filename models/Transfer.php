<?php

namespace app\models;

use Yii;
use yii\data\ActiveDataProvider;

/**
 * This is the model class for table "transfers".
 *
 * @property int $id
 * @property int $from
 * @property int $to
 * @property int $amount
 * @property string $created_at
 * @property string $updated_at
 *
 * @property User $fromUser
 * @property User $toUser
 */
class Transfer extends \yii\db\ActiveRecord
{
    const SCENARIO_TRANSFER = 'transfer';
    /**
     * @var User
     */
    protected $authUser;
    /**
     * @var User
     */
    protected $receiver;
    public $username;
    public $type;
    const TYPE_INCOME = 'income';
    const TYPE_OUTCOME = 'outcome';

    public function __construct(array $config = [])
    {
        parent::__construct($config);
        if (!Yii::$app->user->isGuest) {
            $this->setAuthUser(User::findByUsername(Yii::$app->user->getIdentity()->username));
        }
    }


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'transfers';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['username', 'amount'], 'required', 'on' => self::SCENARIO_TRANSFER],
            [['from', 'to'], 'integer', 'min' => 1],
            [['amount'], 'number', 'min' => 0.01, 'numberPattern' => '/^[\d]*+(.\d{1,2})?$/',
                'message' => 'amount must be a number, and can contain only can 2 decimals after floating point'],
            [['created_at', 'updated_at', 'from', 'to', 'amount', 'type'], 'safe'],
            [['from'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['from' => 'id']],
            [['to'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['to' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'from' => Yii::t('app', 'From'),
            'to' => Yii::t('app', 'To'),
            'amount' => Yii::t('app', 'Amount'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFromUser()
    {
        return $this->hasOne(User::className(), ['id' => 'from']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getToUser()
    {
        return $this->hasOne(User::className(), ['id' => 'to']);
    }




    public function beforeValidate()
    {
        if(parent::beforeValidate()) {
            if (!($this->authUser instanceof User)) {
                $this->addError('username', 'Outcoming user must be instance of User');
            }
            if ($this->username === $this->authUser->username) {
                $this->addError('username', 'You cannot transfer amount to yourself');
            }

            if (!($this->receiver = User::findByUsername($this->username))) {
                $this->addError('username', 'Receiver found with username: ' . $this->username . ' not found');
            }

            if (!$this->canUserTransferAmount()) {
                $this->addError('amount', 'Max value for transfer is:' . $this->authUser->availableTransferAmount());
            }

            if (count($this->errors) === 0) {
                $this->from = $this->authUser->id;
                $this->to = $this->receiver->id;
                $this->amount = (float)number_format($this->amount, 2);
            }
        }

        return count($this->errors) === 0;
    }


    public function afterSave($insert, $changedAttributes)
    {

        $this->receiver->calculateBalance();
        $this->authUser->calculateBalance();

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function setAuthUser(User $user)
    {
        $this->authUser = $user;
    }


    public function search($params = [])
    {
        $query = self::find();

        $this->load($params);

        switch ($this->type) {
            case self::TYPE_INCOME:
                $query->where(['to' => $this->authUser->id]);
                break;
            case self::TYPE_OUTCOME:
                $query->where(['from' => $this->authUser->id]);
                break;
        }

        return new ActiveDataProvider([
            'query' => $query,
        ]);
    }

    public function canUserTransferAmount()
    {
        return ($this->authUser->balance - $this->amount) >= User::MIN_BALANCE;
    }


}
